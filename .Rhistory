rpubchem::get.cid(cids)
url <- paste0("https://pubchem.ncbi.nlm.nih.gov/rest/pug/compound/cid/", cids, "/property/CanonicalSMILES/TXT")
url
response <- GET(url)
response <- httr::GET(url)
View(response)
smiles <- content(response, "text", encoding = "UTF-8")
smiles <- httr::content(response, "text", encoding = "UTF-8")
smiles
cids
paste0("https://pubchem.ncbi.nlm.nih.gov/rest/pug/compound/cid/", cids, "/property/CanonicalSMILES/TXT")
url <- paste0("https://pubchem.ncbi.nlm.nih.gov/rest/pug/compound/cid/2244/property/canonicalsmiles/txt")
response <- httr::GET(url)
smiles <- httr::content(response, "text", encoding = "UTF-8")
url <- paste0("https://pubchem.ncbi.nlm.nih.gov/rest/pug/compound/", cids, "/2244/property/canonicalsmiles/txt")
response <- httr::GET(url)
smiles <- httr::content(response, "text", encoding = "UTF-8")
cids <- stringr::str_c(assay_data$PUBCHEM.CID[!is.na(assay_data$PUBCHEM.CID)][1:10], collapse = ',')
rpubchem::get.cid(cids)
url <- paste0("https://pubchem.ncbi.nlm.nih.gov/rest/pug/compound/", cids, "/2244/property/canonicalsmiles/txt")
response <- httr::GET(url)
smiles <- httr::content(response, "text", encoding = "UTF-8")
smiles
url
url <- paste0("https://pubchem.ncbi.nlm.nih.gov/rest/pug/compound/", cids, "/property/canonicalsmiles/txt")
response <- httr::GET(url)
smiles <- httr::content(response, "text", encoding = "UTF-8")
cids <- stringr::str_c(assay_data$PUBCHEM.CID[!is.na(assay_data$PUBCHEM.CID)][1:10], collapse = ',')
url <- paste0("https://pubchem.ncbi.nlm.nih.gov/rest/pug/compound/", cids, "/property/canonicalsmiles/txt")
response <- httr::GET(url)
smiles <- httr::content(response, "text", encoding = "UTF-8")
smiles
url
url <- paste0("https://pubchem.ncbi.nlm.nih.gov/rest/pug/compound/cid/", cids, "/property/canonicalsmiles/txt")
response <- httr::GET(url)
smiles <- httr::content(response, "text", encoding = "UTF-8")
cids <- stringr::str_c(assay_data$PUBCHEM.CID[!is.na(assay_data$PUBCHEM.CID)][1:1000], collapse = ',')
url <- paste0("https://pubchem.ncbi.nlm.nih.gov/rest/pug/compound/cid/", cids, "/property/canonicalsmiles/txt")
response <- httr::GET(url)
smiles <- httr::content(response, "text", encoding = "UTF-8")
smiles
url
cids <- stringr::str_c(assay_data$PUBCHEM.CID[!is.na(assay_data$PUBCHEM.CID)][1:1000], collapse = ',')
cids <- stringr::str_c(assay_data$PUBCHEM.CID[!is.na(assay_data$PUBCHEM.CID)], collapse = ',')
url <- paste0("https://pubchem.ncbi.nlm.nih.gov/rest/pug/compound/cid/", cids, "/property/canonicalsmiles/txt")
response <- httr::GET(url)
smiles <- httr::content(response, "text", encoding = "UTF-8")
smiles
cids <- stringr::str_c(assay_data$PUBCHEM.CID[!is.na(assay_data$PUBCHEM.CID)][1:100], collapse = ',')
url <- paste0("https://pubchem.ncbi.nlm.nih.gov/rest/pug/compound/cid/", cids, "/property/canonicalsmiles/txt")
response <- httr::GET(url)
smiles <- httr::content(response, "text", encoding = "UTF-8")
ceiling(length(assay_data$PUBCHEM.CID)/500)
map(ceiling(length(assay_data$PUBCHEM.CID)/500), ~assay_data$PUBCHEM.CID[100*.x:(100*.x+1)])
assay_data$PUBCHEM.CID
assay_data = rpubchem::get.assay(1194) %>%
dplyr::filter(is.na(PUCHEM.CID))
assay_data = rpubchem::get.assay(1194) %>%
dplyr::filter(is.na(PUBCHEM.CID))
View(assay_data)
assay_data = rpubchem::get.assay(1194) %>%
dplyr::filter(!is.na(PUBCHEM.CID))
View(assay_data)
map(ceiling(length(assay_data$PUBCHEM.CID)/500), ~assay_data$PUBCHEM.CID[100*.x:(100*.x+1)])
map(ceiling(length(assay_data$PUBCHEM.CID)/500), ~assay_data$PUBCHEM.CID[100*.x:100*(.x+1)])
assay_data$PUBCHEM.CID
map(ceiling(length(assay_data$PUBCHEM.CID)/500), ~assay_data$PUBCHEM.CID[100*.x:100*(.x+100)])
map(ceiling(length(assay_data$PUBCHEM.CID)/500), ~assay_data$PUBCHEM.CID[(.x-1)*100:((.x-1)*100))
map(ceiling(length(assay_data$PUBCHEM.CID)/500), ~assay_data$PUBCHEM.CID[(.x-1)*100:((.x-1)*100)])
map(seq(ceiling(length(assay_data$PUBCHEM.CID)/500)), ~assay_data$PUBCHEM.CID[(.x-1)*100:((.x-1)*100)])
map(seq(ceiling(length(assay_data$PUBCHEM.CID)/500)), ~.x*100)
map(seq(ceiling(length(assay_data$PUBCHEM.CID)/500)), ~(.x-1)*100+1)
map(seq(ceiling(length(assay_data$PUBCHEM.CID)/500)), ~(.x-1)*100+1:.x*100)
map(seq(ceiling(length(assay_data$PUBCHEM.CID)/500)), ~((.x-1)*100+1):.x*100)
map(seq(ceiling(length(assay_data$PUBCHEM.CID)/500)), ~((.x-1)*100+1):(.x*100))
map(seq(ceiling(length(assay_data$PUBCHEM.CID)/500)), ~((.x-1)*100+1):ifelse(length(assay_data$PUBCHEM.CID)>(.x*100), (.x*100), length(assay_data$PUBCHEM.CID)))
map(seq(ceiling(length(assay_data$PUBCHEM.CID)/500)), ~((.x-1)*500+1):ifelse(length(assay_data$PUBCHEM.CID)>(.x*500), (.x*500), length(assay_data$PUBCHEM.CID)))
map(seq(ceiling(length(assay_data$PUBCHEM.CID)/500)),
~assay_data$PUBCHEM.CID[((.x-1)*500+1):ifelse(length(assay_data$PUBCHEM.CID)>(.x*500), (.x*500), length(assay_data$PUBCHEM.CID))])
map(seq(ceiling(length(assay_data$PUBCHEM.CID)/500)),
~str_c(
assay_data$PUBCHEM.CID[((.x-1)*500+1):ifelse(length(assay_data$PUBCHEM.CID)>(.x*500), (.x*500), length(assay_data$PUBCHEM.CID))],
collapse = ","))
cids <- map(seq(ceiling(length(assay_data$PUBCHEM.CID)/500)),
~str_c(
assay_data$PUBCHEM.CID[((.x-1)*500+1):ifelse(length(assay_data$PUBCHEM.CID)>(.x*500), (.x*500), length(assay_data$PUBCHEM.CID))],
collapse = ","))
smiles <- map(cids, ~httr::content(httr::GET(url), "text", encoding = "UTF-8"))
smiles <- unlist(map(cids, ~httr::content(httr::GET(url), "text", encoding = "UTF-8")))
smiles
smiles <- map(cids, ~httr::content(httr::GET(url), "text", encoding = "UTF-8"))
smiles
smiles <- map(cids, ~read_csv(httr::content(httr::GET(url), "text", encoding = "UTF-8")))
View(smiles)
smiles <- unlist(map(cids, ~unlist(read_csv(httr::content(httr::GET(url), "text", encoding = "UTF-8")))))
smiles
smiles <- unlist((map(cids, ~read_csv(httr::content(httr::GET(url), "text", encoding = "UTF-8")))))
smiles
smiles <- c(map(cids, ~unlist(read_csv(httr::content(httr::GET(url), "text", encoding = "UTF-8")))))
View(smiles)
cids <- map(seq(ceiling(length(assay_data$PUBCHEM.CID)/500)),
~str_c(
assay_data$PUBCHEM.CID[((.x-1)*500+1):ifelse(length(assay_data$PUBCHEM.CID)>(.x*500), (.x*500), length(assay_data$PUBCHEM.CID))],
collapse = ","))
url <- map(cids, ~paste0("https://pubchem.ncbi.nlm.nih.gov/rest/pug/compound/cid/", .x, "/property/canonicalsmiles/csv"))
smiles <- c(map(cids, ~unlist(read_csv(httr::content(httr::GET(url), "text", encoding = "UTF-8")))))
cids
url <- map(cids, ~paste0("https://pubchem.ncbi.nlm.nih.gov/rest/pug/compound/cid/", .x, "/property/canonicalsmiles/csv"))
url
smiles <- c(map(url, ~unlist(read_csv(httr::content(httr::GET(.x), "text", encoding = "UTF-8")))))
smiles <- unnlist(map(url, ~unlist(read_csv(httr::content(httr::GET(.x), "text", encoding = "UTF-8")))))
smiles <- unlist(map(url, ~unlist(read_csv(httr::content(httr::GET(.x), "text", encoding = "UTF-8")))))
cids <- map(seq(ceiling(length(assay_data$PUBCHEM.CID)/500)),
~str_c(
assay_data$PUBCHEM.CID[((.x-1)*500+1):ifelse(length(assay_data$PUBCHEM.CID)>(.x*500), (.x*500), length(assay_data$PUBCHEM.CID))],
collapse = ","))
url <- map(cids, ~paste0("https://pubchem.ncbi.nlm.nih.gov/rest/pug/compound/cid/", .x, "/property/canonicalsmiles/csv"))
smiles <- unlist(map(url, ~unlist(read_csv(httr::content(httr::GET(.x), "text", encoding = "UTF-8")))))
mol <- rcdk::parse.smiles(smiles)
smiles
smiles <- unlist(map(url, ~read_csv(httr::content(httr::GET(.x), "text", encoding = "UTF-8"))))
smiles
smiles[1]
mol <- rcdk::parse.smiles(smiles)
mol <- rcdk::parse.smiles(str(smiles))
chr(smiles)
str(smiles)
mol <- rcdk::parse.smiles(str(smiles))
mol <- rcdk::parse.smiles(smiles)
mol <- rcdk::parse.smiles(smiles, smiles.parser = rcdk::get.smiles.parser())
View(mol)
smiles <- c(map(url, ~read_csv(httr::content(httr::GET(.x), "text", encoding = "UTF-8"))))
smiles <- c(unlist(map(url, ~read_csv(httr::content(httr::GET(.x), "text", encoding = "UTF-8")))))
smiles <- c(map(url, ~unlist(read_csv(httr::content(httr::GET(.x), "text", encoding = "UTF-8")))))
View(smiles)
smiles <- unlist(map(url, ~unlist(read_csv(httr::content(httr::GET(.x), "text", encoding = "UTF-8")))))
mol <- rcdk::parse.smiles(smiles, smiles.parser = rcdk::gets)
smiles
names(smiles)
?names
unlist(smiles)
string(smiles)
str(smiles)
vector(smiles)
as.vector(smiles)
mol <- rcdk::parse.smiles(as.vector(smiles), smiles.parser = rcdk::gets)
mol <- rcdk::parse.smiles(as.vector(smiles))
as.vector(smiles)
View(mol)
names(mol) <- smiles
smiles <- unlist(map(url, ~read_csv(httr::content(httr::GET(.x), "text", encoding = "UTF-8"))))
mol <- rcdk::parse.smiles(as.vector(smiles))
as.vector(smiles)
cids <- map(seq(ceiling(length(assay_data$PUBCHEM.CID)/500)),
~str_c(
assay_data$PUBCHEM.CID[((.x-1)*500+1):ifelse(length(assay_data$PUBCHEM.CID)>(.x*500), (.x*500), length(assay_data$PUBCHEM.CID))],
collapse = ","))
url <- map(cids, ~paste0("https://pubchem.ncbi.nlm.nih.gov/rest/pug/compound/cid/", .x, "/property/canonicalsmiles/csv"))
smiles <- unlist(map(url, ~read_csv(httr::content(httr::GET(.x), "text", encoding = "UTF-8"))))
mol <- rcdk::parse.smiles(as.vector(smiles))
smiles <- map(url, ~read_csv(httr::content(httr::GET(.x), "text", encoding = "UTF-8")))
View(smiles)
smiles <- unlist(map(url, ~read_csv(httr::content(httr::GET(.x), "text", encoding = "UTF-8"))CanonicalSMILES))
smiles <- unlist(map(url, ~read_csv(httr::content(httr::GET(.x), "text", encoding = "UTF-8"))$CanonicalSMILES))
mol <- rcdk::parse.smiles(as.vector(smiles))
cids <- map(seq(ceiling(length(assay_data$PUBCHEM.CID)/500)),
~str_c(
assay_data$PUBCHEM.CID[((.x-1)*500+1):ifelse(length(assay_data$PUBCHEM.CID)>(.x*500), (.x*500), length(assay_data$PUBCHEM.CID))],
collapse = ","))
url <- map(cids, ~paste0("https://pubchem.ncbi.nlm.nih.gov/rest/pug/compound/cid/", .x, "/property/canonicalsmiles/csv"))
smiles <- unlist(map(url, ~read_csv(httr::content(httr::GET(.x), "text", encoding = "UTF-8"))$CanonicalSMILES))
mol <- rcdk::parse.smiles(as.vector(smiles))
runApp('GitHub/Gemstone/Gemstone.R')
runApp('GitHub/Gemstone/Gemstone.R')
runApp('GitHub/Gemstone/Gemstone.R')
runApp('GitHub/Gemstone/Gemstone.R')
runApp('GitHub/Gemstone/Gemstone.R')
runApp('GitHub/Gemstone/Gemstone.R')
runApp('GitHub/Gemstone/Gemstone.R')
runApp('GitHub/Gemstone/Gemstone.R')
assay_data[, sapply(assay_data, is.character)]
runApp('GitHub/Gemstone/Gemstone.R')
runApp('GitHub/Gemstone/Gemstone.R')
assay_data = rpubchem::get.assay(1024) %>%
dplyr::filter(!is.na(PUBCHEM.CID))
assay_data = rpubchem::get.assay(1024) %>%
dplyr::filter(!is.na(PUBCHEM.CID))
assay_data = rpubchem::get.assay(1024)
assay_data = rpubchem::get.assay(883) %>%
dplyr::filter(!is.na(PUBCHEM.CID))
View(assay_data)
exists(assay_data$PUBCHEM.EXT.DATASOURCE.SMILES)
(colnames(assay_data) %in% PUBCHEM.EXT.DATASOURCE.SMILES)
('PUBCHEM.EXT.DATASOURCE.SMILES' %in% colnames(assay_data))
runApp('GitHub/Gemstone/Gemstone.R')
runApp('GitHub/Gemstone/Gemstone.R')
View(assay_data)
runApp('GitHub/Gemstone/Gemstone.R')
assay_data = rpubchem::get.assay(883) %>%
dplyr::filter(!is.na(PUBCHEM.CID))
runApp('GitHub/Gemstone/Gemstone.R')
runApp('GitHub/Gemstone/Gemstone.R')
('PUBCHEM.EXT.DATASOURCE.SMILES' %in% colnames(assay_data))
if('PUBCHEM.EXT.DATASOURCE.SMILES' %in% colnames(assay_data)){
mol <- rcdk::parse.smiles(assay_data$PUBCHEM.EXT.DATASOURCE.SMILES)
}
View(mol)
if('PUBCHEM.EXT.DATASOURCE.SMILES' %in% colnames(assay_data)){
mol <- rcdk::parse.smiles(assay_data$PUBCHEM.EXT.DATASOURCE.SMILES)
}
else {
if('PUBCHEM.EXT.DATASOURCE.SMILES' %in% colnames(assay_data)){
mol <- rcdk::parse.smiles(assay_data$PUBCHEM.EXT.DATASOURCE.SMILES)
} else {
cids <- map(seq(ceiling(length(assay_data$PUBCHEM.CID)/500)),
~str_c(
assay_data$PUBCHEM.CID[((.x-1)*500+1):ifelse(length(assay_data$PUBCHEM.CID)>(.x*500), (.x*500), length(assay_data$PUBCHEM.CID))],
collapse = ","))
url <- map(cids, ~paste0("https://pubchem.ncbi.nlm.nih.gov/rest/pug/compound/cid/", .x, "/property/canonicalsmiles/csv"))
smiles <- unlist(map(url, ~read_csv(httr::content(httr::GET(.x), "text", encoding = "UTF-8"))$CanonicalSMILES))
mol <- rcdk::parse.smiles(as.vector(smiles))
}
runApp('GitHub/Gemstone/Gemstone.R')
('PUBCHEM.EXT.DATASOURCE.SMILES' %in% colnames(assay_data))
if('PUBCHEM.EXT.DATASOURCE.SMILES' %in% colnames(assay_data)){
mol <- rcdk::parse.smiles(assay_data$PUBCHEM.EXT.DATASOURCE.SMILES)
} else {
cids <- map(seq(ceiling(length(assay_data$PUBCHEM.CID)/500)),
~str_c(
assay_data$PUBCHEM.CID[((.x-1)*500+1):ifelse(length(assay_data$PUBCHEM.CID)>(.x*500), (.x*500), length(assay_data$PUBCHEM.CID))],
collapse = ","))
url <- map(cids, ~paste0("https://pubchem.ncbi.nlm.nih.gov/rest/pug/compound/cid/", .x, "/property/canonicalsmiles/csv"))
smiles <- unlist(map(url, ~read_csv(httr::content(httr::GET(.x), "text", encoding = "UTF-8"))$CanonicalSMILES))
mol <- rcdk::parse.smiles(as.vector(smiles))
}
# Generate molecular fingerprints
fingerprints <- Rcpi::extractDrugExtendedComplete(mol) %>%
data.frame() %>%
set_names(paste("ECFP", 1:ncol(.)))
# Generate molecular descriptors (e.g., Rule of 5)
descriptors <- do.call(cbind, lapply(
c('extractDrugApol', 'extractDrugTPSA', 'extractDrugHBondAcceptorCount',
'extractDrugHBondDonorCount', 'extractDrugWeight', 'extractDrugXLogP'),
function(f) eval(parse(text = paste0('Rcpi::', f, '(mol)'))))) %>%
data.frame()
# Combine fingerprints and descriptors into a single dataset
training_data <- data.frame(cbind(PUBCHEM.ACTIVITY.OUTCOME=as.factor(assay_data$PUBCHEM.ACTIVITY.OUTCOME),descriptors, fingerprints))
rv$index <- caret::createDataPartition(training_data$PUBCHEM.ACTIVITY.OUTCOME, p = 0.75, list = FALSE)
training_data
View(training_data)
runApp('GitHub/Gemstone/Gemstone.R')
runApp('GitHub/Gemstone/Gemstone.R')
runApp('GitHub/Gemstone/Gemstone.R')
runApp('GitHub/Gemstone/Gemstone.R')
library(shiny); runApp('GitHub/Gemstone/Gemstone.R')
runApp('GitHub/Gemstone/Gemstone.R')
runApp('GitHub/Gemstone/Gemstone.R')
runApp('GitHub/Gemstone/Gemstone.R')
assay_data = rpubchem::get.assay(1190) %>%
dplyr::filter(!is.na(PUBCHEM.CID))
mol <- rcdk::parse.smiles(assay_data$PUBCHEM.EXT.DATASOURCE.SMILES)
# Generate molecular descriptors (e.g., Rule of 5)
descriptors <- do.call(cbind, lapply(
c('extractDrugExtendedComplete',' extractDrugApol', 'extractDrugTPSA', 'extractDrugHBondAcceptorCount',
'extractDrugHBondDonorCount', 'extractDrugWeight', 'extractDrugXLogP'),
function(f) eval(parse(text = paste0('Rcpi::', f, '(mol)'))))) %>%
data.frame() %>%
set_names(str_replace(colnames(.), "(X)(\\d)", "ECFP\\2"))
# Combine fingerprints and descriptors into a single dataset
training_data <- data.frame(cbind(PUBCHEM.ACTIVITY.OUTCOME=as.factor(assay_data$PUBCHEM.ACTIVITY.OUTCOME),descriptors, fingerprints))
View(descriptors)
View(assay_data)
# Combine fingerprints and descriptors into a single dataset
training_data <- data.frame(cbind(PUBCHEM.ACTIVITY.OUTCOME=as.factor(assay_data$PUBCHEM.ACTIVITY.OUTCOME),descriptors))
sdf_data <- rcdk::load.molecules('repurposing.sdf')
setwd("~/GitHub/Gemstone")
sdf_data <- rcdk::load.molecules('repurposing.sdf')
# Generate molecular descriptors (e.g., Rule of 5) for unknowns
unknown_data <- do.call(cbind, map(
c('extractDrugExtendedComplete', 'extractDrugApol', 'extractDrugTPSA', 'extractDrugHBondAcceptorCount',
'extractDrugHBondDonorCount', 'extractDrugWeight', 'extractDrugXLogP'),
function(f) eval(parse(text = paste0('Rcpi::', f, '(mol)'))))) %>%
data.frame() %>%
set_names(str_replace(colnames(.), "(X)(\\d)", "ECFP\\2"))
View(unknown_data)
num_columns <- sapply(training_data, is.numeric)
num_columns
ifelse(is.na(x), mean(training_data[x], na.rm = TRUE), x)
unknown_data[num_columns] <- lapply(unknown_data[num_columns], function(x) {
ifelse(is.na(x), mean(training_data[x], na.rm = TRUE), x)
})
unknown_data[num_columns]
num_columns
names(unknown_data[, num_columns])
unknown_data[, num_columns]
unknown_data
num_columns
unknown_data[num_columns]
unknown_data[, colnames(training_data)]
colnames(training_data)
unknown_data
unknown_data[colnames(training_data)]
dplyr::select(unknown_data, colnames(training_data))
unknown_data <- dplyr::select(unknown_data, any_of(colnames(training_data)))
unknown_data
names(unknown_data[num_columns]
)
num_columns
unknown_data[, num_columns]
unknown_data[, names(num_columns)]
View(unknown_data)
View(training_data)
View(unknown_data)
View(training_data)
View(unknown_data)
colnames(unknown_data)
unknown_data[num_columns] <- lapply(colnames(unknown_data), function(x) {
ifelse(is.na(unknown_data[, x]), mean(training_data[, x], na.rm = TRUE), x)
})
ifelse(is.na(unknown_data[x]), mean(training_data[x], na.rm = TRUE), x)
unknown_data[num_columns] <- lapply(colnames(unknown_data), function(x) {
ifelse(is.na(unknown_data[x]), mean(training_data[x], na.rm = TRUE), x)
})
unknown_data[x]
unknown_data[num_columns[1]
]
is.na(unknown_data[names(num_columns[1])])
names(num_columns[1])
num_columns
num_columns
training_data[, sapply(training_data, is.numeric)]
num_columns <- training_data[, sapply(training_data, is.numeric)]
is.na(unknown_data[x])
colnames(num_columns)
unknown_data[num_columns] <- lapply(colnames(num_columns), function(x) {
ifelse(is.na(unknown_data[x]), mean(x, na.rm = TRUE), x)
})
unknown_data[num_columns] <- lapply(num_columns, function(x) {
ifelse(is.na(x), mean(training_data[, colanmes(x)], na.rm = TRUE), x)
})
num_columns
View(num_columns)
map(num_columns, print)
map(num_columns, ~is.na(x))
map(num_columns, ~is.na(.x))
map(num_columns, ~ifelse(is.na(.x), print(names(x)), x))
map(num_columns, ~ifelse(is.na(.x), print(names(.x)), .x))
unknown_data[num_columns]
unknown_data[, num_columns]
names(num_columns)
unknown_data[, names(num_columns)]
View(unknown_data)
map(unknown_data, ~ifelse(is.na(.x), mean(training_data[, names(x)], na.rm = TRUE), x))
map(unknown_data, ~ifelse(is.na(.x), mean(training_data[, names(.x)], na.rm = TRUE), .x))
unknown_data <- map(unknown_data, ~ifelse(is.na(.x), mean(training_data[, names(.x)], na.rm = TRUE), .x)) %>%
bind_rows()
View(unknown_data)
unknown_data <- map(unknown_data, ~ifelse(is.na(.x), mean(training_data[, names(.x)], na.rm = TRUE), .x)) %>%
bind_rows() %>%
set_names(names(.))
View(unknown_data)
unknown_data <- map(unknown_data, ~ifelse(is.na(.x), mean(training_data[, names(.x)], na.rm = TRUE), .x)) %>%
bind_rows() %>%
tibble::column_to_rownames(rownames(.))
# Generate molecular descriptors (e.g., Rule of 5) for unknowns
unknown_data <- do.call(cbind, map(
c('extractDrugExtendedComplete', 'extractDrugApol', 'extractDrugTPSA', 'extractDrugHBondAcceptorCount',
'extractDrugHBondDonorCount', 'extractDrugWeight', 'extractDrugXLogP'),
function(f) eval(parse(text = paste0('Rcpi::', f, '(mol)'))))) %>%
data.frame() %>%
set_names(str_replace(colnames(.), "(X)(\\d)", "ECFP\\2"))
unknown_data <- dplyr::select(unknown_data, any_of(colnames(training_data)))
View(unknown_data)
num_columns <- training_data[, sapply(training_data, is.numeric)]
rownames(unknown_data)
unknown_data <- map(unknown_data, ~ifelse(is.na(.x), mean(training_data[, names(.x)], na.rm = TRUE), .x)) %>%
bind_rows() %>%
tibble::column_to_rownames(rownames(unknown_data))
# Generate molecular descriptors (e.g., Rule of 5) for unknowns
unknown_data <- do.call(cbind, map(
c('extractDrugExtendedComplete', 'extractDrugApol', 'extractDrugTPSA', 'extractDrugHBondAcceptorCount',
'extractDrugHBondDonorCount', 'extractDrugWeight', 'extractDrugXLogP'),
function(f) eval(parse(text = paste0('Rcpi::', f, '(mol)'))))) %>%
data.frame() %>%
set_names(str_replace(colnames(.), "(X)(\\d)", "ECFP\\2"))
unknown_data <- dplyr::select(unknown_data, any_of(colnames(training_data)))
num_columns <- training_data[, sapply(training_data, is.numeric)]
map(unknown_data, ~ifelse(is.na(.x), mean(training_data[, names(.x)], na.rm = TRUE), .x)) %>%
bind_rows()
rownames(unknown_data)
map(unknown_data, ~ifelse(is.na(.x), mean(training_data[, names(.x)], na.rm = TRUE), .x)) %>%
bind_rows() %>%
tibble::column_to_rownames(rownames(unknown_data))
cnames <- rownames(unknown_data)
map(unknown_data, ~ifelse(is.na(.x), mean(training_data[, names(.x)], na.rm = TRUE), .x)) %>%
bind_rows() %>%
tibble::column_to_rownames(cnames)
map(unknown_data, ~ifelse(is.na(.x), mean(training_data[, names(.x)], na.rm = TRUE), .x)) %>%
bind_rows() %>%
tibble::column_to_rownames(cnames)
assay_data = rpubchem::get.assay(1190) %>%
dplyr::filter(!is.na(PUBCHEM.CID))
mol <- rcdk::parse.smiles(assay_data$PUBCHEM.EXT.DATASOURCE.SMILES)
# Generate molecular descriptors (e.g., Rule of 5)
descriptors <- do.call(cbind, map(
c('extractDrugExtendedComplete',' extractDrugApol', 'extractDrugTPSA', 'extractDrugHBondAcceptorCount',
'extractDrugHBondDonorCount', 'extractDrugWeight', 'extractDrugXLogP'),
function(f) eval(parse(text = paste0('Rcpi::', f, '(mol)'))))) %>%
data.frame() %>%
set_names(str_replace(colnames(.), "(X)(\\d)", "ECFP\\2"))
# Combine fingerprints and descriptors into a single dataset
training_data <- data.frame(cbind(PUBCHEM.ACTIVITY.OUTCOME=as.factor(assay_data$PUBCHEM.ACTIVITY.OUTCOME),descriptors))
sdf_data <- rcdk::load.molecules('repurposing.sdf')
# Generate molecular descriptors (e.g., Rule of 5) for unknowns
unknown_data <- do.call(cbind, map(
c('extractDrugExtendedComplete', 'extractDrugApol', 'extractDrugTPSA', 'extractDrugHBondAcceptorCount',
'extractDrugHBondDonorCount', 'extractDrugWeight', 'extractDrugXLogP'),
function(f) eval(parse(text = paste0('Rcpi::', f, '(mol)'))))) %>%
data.frame() %>%
set_names(str_replace(colnames(.), "(X)(\\d)", "ECFP\\2"))
unknown_data <- dplyr::select(unknown_data, any_of(colnames(training_data)))
num_columns <- training_data[, sapply(training_data, is.numeric)]
cnames <- rownames(unknown_data)
unknown_data <- map(unknown_data, ~ifelse(is.na(.x), mean(training_data[, names(.x)], na.rm = TRUE), .x)) %>%
bind_rows()
rownames(unknown_data) <- cnames
row.names(unknown_data) <- cnames
assay_data = rpubchem::get.assay(1190) %>%
dplyr::filter(!is.na(PUBCHEM.CID))
mol <- rcdk::parse.smiles(assay_data$PUBCHEM.EXT.DATASOURCE.SMILES)
# Generate molecular descriptors (e.g., Rule of 5)
descriptors <- do.call(cbind, map(
c('extractDrugExtendedComplete',' extractDrugApol', 'extractDrugTPSA', 'extractDrugHBondAcceptorCount',
'extractDrugHBondDonorCount', 'extractDrugWeight', 'extractDrugXLogP'),
function(f) eval(parse(text = paste0('Rcpi::', f, '(mol)'))))) %>%
data.frame() %>%
set_names(str_replace(colnames(.), "(X)(\\d)", "ECFP\\2"))
# Combine fingerprints and descriptors into a single dataset
training_data <- data.frame(cbind(PUBCHEM.ACTIVITY.OUTCOME=as.factor(assay_data$PUBCHEM.ACTIVITY.OUTCOME),descriptors))
sdf_data <- rcdk::load.molecules('repurposing.sdf')
# Generate molecular descriptors (e.g., Rule of 5) for unknowns
unknown_data <- do.call(cbind, map(
c('extractDrugExtendedComplete', 'extractDrugApol', 'extractDrugTPSA', 'extractDrugHBondAcceptorCount',
'extractDrugHBondDonorCount', 'extractDrugWeight', 'extractDrugXLogP'),
function(f) eval(parse(text = paste0('Rcpi::', f, '(mol)'))))) %>%
data.frame() %>%
set_names(str_replace(colnames(.), "(X)(\\d)", "ECFP\\2"))
unknown_data <- dplyr::select(unknown_data, any_of(colnames(training_data)))
num_columns <- training_data[, sapply(training_data, is.numeric)]
cnames <- rownames(unknown_data)
cnames
map(unknown_data, ~ifelse(is.na(.x), mean(training_data[, names(.x)], na.rm = TRUE), .x)) %>%
bind_rows() %>%
as.data.frame()
map(unknown_data, ~ifelse(is.na(.x), mean(training_data[, names(.x)], na.rm = TRUE), .x)) %>%
bind_rows() %>%
as.data.frame() %>%
tibble::column_to_rownames(cnames)
unknown_data <- map(unknown_data, ~ifelse(is.na(.x), mean(training_data[, names(.x)], na.rm = TRUE), .x)) %>%
bind_rows() %>%
as.data.frame()
row.names(unknown_data) <- cnames
unknown_data
View(unknown_data)
runApp('Gemstone.R')
runApp('Gemstone.R')
runApp('Gemstone.R')
runApp('Gemstone.R')
runApp('Gemstone.R')
runApp('Gemstone.R')
runApp('Gemstone.R')
runApp('Gemstone.R')
runApp('Gemstone.R')
runApp('Gemstone.R')
runApp('Gemstone.R')
runApp('Gemstone.R')
runApp('Gemstone.R')
runApp('Gemstone.R')
runApp('Gemstone.R')
runApp('Gemstone.R')
setwd("~/GitHub/Gemstone")
# Setup database connection pool
pool <- dbPool(RSQLite::SQLite(), "models.db")
# Setup database connection pool
pool <- DBIConnect::dbPool(RSQLite::SQLite(), "models.db")
install.packages("DBIConnect")
BiocManager::install("DBIConnect")
library(pool)
install.packages("pool")
library(pool)
pool <- dbPool(RSQLite::SQLite(), dbname = "models.db")
# Create a table to store models if it doesn't exist
dbExecute(pool, "CREATE TABLE IF NOT EXISTS models (aid INTEGER PRIMARY KEY, model BLOB)")
runApp('Gemstone.R')
runApp('Gemstone.R')
runApp('Gemstone.R')
runApp('Gemstone.R')
runApp('Gemstone.R')
runApp('Gemstone.R')
runApp('Gemstone.R')
runApp('Gemstone.R')
runApp('Gemstone.R')
runApp('Gemstone.R')
runApp('Gemstone.R')
runApp('Gemstone.R')
runApp('Gemstone.R')
runApp('Gemstone.R')
runApp('Gemstone.R')
runApp('Gemstone.R')
runApp('Gemstone.R')
runApp('Gemstone.R')
runApp('Gemstone.R')
